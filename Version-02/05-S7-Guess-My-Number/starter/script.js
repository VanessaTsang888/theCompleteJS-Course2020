'use strict';

/**************************************************************************************************************************************** 

SECTION 7. JavaScript in the Browser: DOM and Events Fundamentals.

70. Project 1: Guess My Number!

***************************************************************************************************************************************/

// QUICK INTRO TO THE DOM AND HOW TO SELECT AN ELEMENT FROM A PAGE: Interact with the DOM.
// In JavaScript we can select elements based on it's class (see index.html file).
// Select an element in JavaScript - a class
// Select the textContent element from a page:
// executed from left to right. The .textContent is text: Start guessing...
// console.log(document.querySelector('.message').textContent);

// First DOM manipulation:
// Open the live server in Terminal.
// Open the Terminal tab her, use this command: live-server
// Then hit Enter key.


/**************************************************************************************************************************************** 

71. What's the DOM and DOM Manipulation:
What and how it works and what it looks like:

Make JS interact with a webpage: doing DOM Manipulation.
In the last lecture I already selected an element from a page, which means I've interacted with the DOM. Now, I'll learn what the DOM
actually is and how it works.

What is the DOM: Document Object Model:
A structured representation of HTML documents. Allows JavaScript to access HTML elements and styles to manipulate them.

The DOM allows us to use JavaScript to access HTML elements and styles in order to manipulate them. Example,
we will be able to change text, to change HTML attributes and also to change CSS styles from our JavaScript. We can say that the
DOM is basically a connection point between HTML documents and JavaScript code.

The DOM is automatically created by the browser as soon as the HTML page loads. It's stored in a tree structure, generated by browser
on HTML load. In this tree, each HTML element is one object.

DOM Structure:
Tree structure: we use the terms:
child element, parent element, sibling element and so on when we talk about the DOM tree and DOM manipulation.
There is one element node and in DOM tree and we can access and interact with each of these nodes using JavaScript.
The DOM always starts with the document object, right at the very top. Document is special object that we have access to in JS, which
serves as an entry point into the DOM: document.querySelector...
This mean the document.querySelector is available on the document object. This is why the document is the entry point to the DOM,
as we need it to start selecting elements.
The first child element of the document is usally the HTML element - the root element in all HTML documents, that usually has 2
child elements, head and body - find them in the DOM tree. Then when we go deeper into the nested HTML structure, we keep adding more and
more children to the DOM tree. The paragraph element can have a child too which is the link element.
A DOM tree has more than just element nodes. It also has nodes for all the text itself, comments and other stuff. The rule is, what ever is in
the HTML document also has to be in the DOM. So the DOM is really the complete representation of the HTML document, so that we can manipulate it in
complex ways. 

DOM !== JavaScript:

The DOM Method and Properties for DOM Manipulation is NOT part of JavaScript as JS is just a dialect of the ECMAScript specification,
and all this DOM related stuff is simply not in there. Starting form this section, we'll use JS in a browser - to manipulate web pages
that are acutally displayed and rendared in the browsers. How it works is that the DOM and DOM methods are actually part of something
called the web API's, which are like libraries that browsers implement and that we can access from our JS code.
API: Application Programming Interface.

Web API: libraries written in JS, auto available behind the scense. DOM manipulation works the same in all browsers. Apart from the DOM,
there are lots more API's such as timers, the fetch API, etc.

***************************************************************************************************************************************/



/**************************************************************************************************************************************** 
 * 
 * 72. Selecting and Manipulating Elements:
 * 
 * 
***************************************************************************************************************************************/

/*

// Do more DOM manipulation:

// textContent: Start guessing...
console.log(document.querySelector('.message').textContent);

// Besides getting the text content, we can set the conent of the element, i.e. Correct Number! that's the winning phase.
// write what we want the new content to be:
document.querySelector('.message').textContent = 'Correct Number! üéâ';

// We need the HTML to get all the class names of the elements we want to manipulate.

// Set the '?' (which in the HTML is: .number) to 13
 
document.querySelector('.number').textContent = 13;
document.querySelector('.score').textContent = 10;

// Manipulate the input field. We can get data from here and set it.
// The input field has class of guess ( class="guess"). Its an input element. 

// Manipulate this element:
document.querySelector('.guess').value = 23;
console.log(document.querySelector('.guess').value); // 23

// If we want a number to appear when we click the Check! button, handlng a click of a button is in next video.

*/

/******************************************************************************************************************************************************
 * 
 * 73. Handling Click Events:
 * 
 * Make our app do something when we click on the 'Check!' button.
 * This will be the first time our code will reacts to something that happends in the DOM. That we need to use a Event Listener.
 * An event is something that happens on the page, i.e. a mouse click, a keyPress etc. Then with an Event Listener we can wait for a certain event
 * to happen and then react to it. 
 * 
 * Now we start building the app.
 * In order to listen for events, first select the element where the event should happen. In this case we want to listen to the event on this the button
 * element: the 'Check!' as this where it will happen. When we click on this button, something should happen. 
******************************************************************************************************************************************************/
/*
// select the button element. Then Will return an element. Now on that element, we can call the addEventListener method, call it using the parenthesis.
// Pass-in the type of the event: 'click'. Tell the event listener what to do, specify the reaction to the 'click' event. We do that by defining a
// function which will contain exactly the code that should be executed whenever this click event happens on this 'Check!' btn. That function will be
// event handler. The addEventListener method is a special kind of function since as a second argument, it expects this event handler function that
// we just talked about. Pass-in a function value as an argument as a function is just another type of value.
// In the function body, specify what should happen - log to console the value in the input field. 

// When we get an input from the user, its usally a String. We can make it a Number to compare with a Number.

document.querySelector('.check').addEventListener('click', function() {
    const guess =  Number(document.querySelector('.guess').value);
// We can do some DOM manipulation here:
// document.querySelector('.message').textContent = 'Correct Number! üéâ';
console.log(guess, typeof guess);
// Implement the game logic: is there a value, if not we print somethings as a response. if we get no response. Will get evaluated as a Boolean.
// 0 is a falsy value and will get converted to false. But we want something to happen when its false. So we use: !guess means if NOT a guess then print out: No number!
if (!guess) {
    document.querySelector('.message').textContent = '‚õîÔ∏è No number!'
}
});

// Now, theUser can type a number in to the input box, click the 'Check!' button and it will appear in the console.
// Summary:
// 1. Select the btn with the: document.querySelector. 2. Use the addEventListener method on that element to attached an event handler, which is the function.
// This is just a function expression. We not storing in a variable but passing into the addEventListener method. First argument is the name of the event we are
// listening or, then as second arguement we have the function value, which contains the code we wish to execute when the event happens.
// We only define the function but not call it. Then pass to the event handler. Its the JS engine that calls the function as soon as the event happens.
*/

/******************************************************************************************************************************************************
 * 
 * 74. Implementing the Game Logic:
 * 
 * Three Scenarios to implement:
 * Implement when the guess is correct, when it's equal to the secret number. Also, impliment when what happens when the guess is too low or too high.
 * 
 * 1. define the secret number, so we have something to compare the guess to
 * 2. 
 * 
 *****************************************************************************************************************************************************/

// Where should we define the secret number? Outside of the button handler (before the document.quearySelector) as we only want that secret number to be defined once, only when we start
// the app.
// Implement this: We start with a score of 20. Every time we guess wrong, the score decreases.
// Implement this in the code where the score is Too high or Too low.
// Create a variable for the score in the code and then update that variable, increase or decrease it. then display the value of that variable. 

// Define the number, a random number between 1 and 20 using the Math.random() function.
let secretNumber = Math.trunc(Math.random() * 20) + 1;

// initial score:
let score = 20;
let highscore = 0;

/* What is this for?
const displayMessage = function (message) {
    document.querySelector('.message').textContent = message;
  };
  */
  
  // Set the message and put it into this display message function that we can use everywhere.
  const displayMessage = function(message) {    
    document.querySelector('.message').textContent = message;


  }

document.querySelector('.check').addEventListener('click', function() {
    const guess =  Number(document.querySelector('.guess').value);
// We can do some DOM manipulation here:
console.log(guess, typeof guess);
// Implement the game logic: is there a value, if not we print somethings as a response. if we get no response. Will get evaluated as a Boolean.

// When there is no input    
if (!guess) {
        // document.querySelector('.message').textContent = '‚õîÔ∏è No number!'
        // if there is a guess and its the same as the secret number then the correct number message should be displayed. 
        // This argument will become the message when this function is called.
        displayMessage('No number!');

    // When player wins    
    } else if (guess === secretNumber) {
        // document.querySelector('.message').textContent = 'Correct Number!';
        displayMessage('Correct Number'); // cleaner and DRY.

        // Select that number. The class name is: number. We use textContent to set it, we use the assigment operator with the number we just calculated.
        document.querySelector('.number').textContent = secretNumber;

        // Change the background colour when the user guesses the corret number - when the player wins the game:
        document.querySelector('body').style.backgroundColor = '#60b347';
        // Make the winning number box wider:
        document.querySelector('.number').style.width = '30rem';
        
        // The condition: if the score of the current game is greater than the highscore that we already had, then the highscore will become the new current score.
    if (score > highscore) {
      highscore = score;
      // display the new highscore:
      document.querySelector('.highscore').textContent = highscore;
    }
    // When guess is wrong or different to the secretNumber:
} else if(guess !== secretNumber) {
    if(score > 1) {
        // document.querySelector('.message').textContent = guess > secretNumber ? 'Too high!' : 'Too low!';
    displayMessage(guess > secretNumber ? 'Too high!' : 'Too low!');

        score--;
        document.querySelector('.score').textContent = score;
    
    } else {
        // document.querySelector('.message').textContent = 'You Lost The Game!';
        displayMessage('You Lost The Game!');
        document.querySelector('.score').textContent = 0;
    }
}

    // When guess is too high     
//     } else if (guess > secretNumber) {
//         // Below should happen while the score is still above zero.
//     if (score > 1) {
//         document.querySelector('.message').textContent = 'Too high!';
//         // decrease the score:
//         score--;
//         // update the score element:
//         document.querySelector('.score').textContent = score;  
//     // if guess is zero, then display this message: 
//     }                  
//     else {
//         document.querySelector('.message').textContent = 'You lost the game!';
//         // update the score element:
//         document.querySelector('.score').textContent = 0;
//     }
//  // When guess is too low, lower than the secret numer, then select the msg, then print out: Too low!       
//     } else if (guess < secretNumber) {
//         if (score > 1) {
//             document.querySelector('.message').textContent = 'Too low!';
//             // decrease the score:
//             score--;
//             // update the score element:
//             document.querySelector('.score').textContent = score;  
//         // if guess is zero, then display this message: 
//         }                  
//         else {
//             document.querySelector('.message').textContent = 'You lost the game!';
//             // update the score element:
//             document.querySelector('.score').textContent = 0;
//         }
        
//     }
});


/******************************************************************************************************************************************************
 * 
 * 75. Manipulating CSS Styles:
 * 
 * The DOM includes CSS styles, so with DOM manipulation we can also change styles. 
 * 
 * Do inline styles: style that's added directly into the HTML using the style attribute.
 * Change the background colour when the user guesses the corret number - when the player wins the game. Also, the winning number box wider.
 * We need to manipulate the styles of this page - the CSS. We do this in the code where the:
 * (guess === secretNumber)
 * First select the whole body this page, select the element we want to manipulate - When the player wins.
 * 
 * My code is within the other code above.
 ******************************************************************************************************************************************************/



 /***************************************************************************************************************************************  

 Coding Challenge 1:

1. hide the secret number, make it to display a question mark: ?
Move this code:
document.querSelector('.number').textContent = secretNumber;

 to the situation where the player wins:
 (guess === secretNumber)

 Now we have the questin mark and we can start guessing. Now its a real game as we don't know what the secret number is.
 The Highscore is also working.

Implement a game rest functionality, so that the player can make a new guess!

Your tasks:

1. Select the element witht he 'again' class and attach a click event handler.

2. In the handler function, restore initial values of the 'score' and 'secretNumber' variables.

3. Restore the initial conditions of the message, number, score and guess input fields.

4. Also restore the original background color(#222) and number width(15rem).

***************************************************************************************************************************************/

// This is an anonymous handler function as it don't have a name.
// 1. Create the 'agin' class and attached a 'click' event handler.
// 2. Restore the initial values of the 'score' and 'secretNumber' variables:
// the score at the beginning of game is 20. Then I need a new secret number. Reassign the value to secretNumber (let not const).
// New number and reassign the variable.
// 3. Restore the initial conditions of the message, number, score and guess input fields for the user to play the game again without reloading the browser.
// The initail message is: Start guessing. 
// Change the score: set it to the score variable as it already holds the number 20.  
// change the number and set it to the question mark.
// Change the value in the input box to an empty string as the user input will always be a string. Also, change the value in the input box to the
// empty string/the abance of any value in the input box.
// 4. Restore the original background color(#222) and number width(15rem) when user starts a new game.


document.querySelector('.again').addEventListener('click', function() {
    let score = 20;
    // let secretNumber = '?';
    // variable shadowing - i defined same variable twice in different scopes. so the global variable 'secretNumber' not available to use.
    secretNumber = Math.trunc(Math.random() * 20) + 1;
    // document.querySelector('.message').textContent = 'Start Guessing Now...';
    displayMessage('Start Guessing Now...');
    document.querySelector('.score').textContent = score;
    document.querySelector('.number').textContent = '?';
    document.querySelector('.guess').value = '';

    document.querySelector('body').style.backgroundColor = '#222';
    document.querySelector('.number').style.width = '15rem';
});

/******************************************************************************************************************************************************
 * 
 * 77. Implementing Highscores:
 * 
 * The aim of the game is to achieve a better highscore each time you play the game. The higher the number of your highscore the better.
 * When the user clicks on the 'Again!' to play the game again, the highscore will remain the same and the goal is to beat that highscore.
 * Once the user has completed the next game but the score is lower than their previous score, the highscore will remain the same as the score is NOT
 * higher than highscore. The first highscore is always going to be 0.
 * Need to check if the current score is greater than the highscore? The code for this should go insdie the first 'else if' block as an 'if-statement',
 * this is where the player has won the game. If the new score is NOT greater than the highscore, then the highscore will remain the same.
 * I need to create a new 'highscore' variable at the top, after the 'score' variable.
 * 
 * Buy clicking the Again! buttom, everything will reset but keeping the highscore.
 * See my code above.
 ****************************************************************************************************************************************************/

/******************************************************************************************************************************************************

78. Refactoring Our Code: The DRY Principle:

Try to avoid duplicated code where possible. Use a technique called refactoring which means to restructure the code, without changing how it works.
It improves the code and to eliminate duplicate code. 

1. identify duplicated code:
The code for When guess is too high is almost the same as the code for When the guess is too low. We need to eliminate half of this code.
Both checks if the guess:
(guess > secretNumber)
(guess < secretNumber)
is basically checking is the guess is different to the secretNumber:
so when ever the guess is different from the secretNumber then all of the code should get execued.
The only thing that chances is the String of: Too high! or Too low!
So we just need one block of code for when the guess is different.
First add a new else-if block - When guess is wrong, the guess is diffent to the secretNumber. Then delete the old code.
Too high should only happen when the guess is higher than the secretNumebr. We need conditional to workout if the guess is greater or lower than the
secretNumber. Use a Ternary operator which will return a value.
Summary:
Unify the 2 conditions, as both means if the guess is different to the secretNumber. The only thing that chances is the message that is displayed on the
web page.  See code above.

Other duplicated code:
Setting the message, setting the number, setting the score and calculating the random secret number. We can refactor functionality we use over and over again
into their own functions in order to make code more DRY.

 ****************************************************************************************************************************************************/

